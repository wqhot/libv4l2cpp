cmake_minimum_required(VERSION 3.0)

# set project name from current directory
get_filename_component(BASENAME ${CMAKE_CURRENT_LIST_DIR} NAME)
project(v4l2cpp)

set (CMAKE_CXX_STANDARD 11)

aux_source_directory(src SRC_FILES)
add_library(${PROJECT_NAME} STATIC ${SRC_FILES})
target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_CURRENT_LIST_DIR}/inc")

add_executable (${PROJECT_NAME}test main.cpp)
target_link_libraries (${PROJECT_NAME}test ${PROJECT_NAME}) 


find_package(Git)
execute_process(COMMAND ${GIT_EXECUTABLE} describe --abbrev=6 --dirty --always --tags
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE  GIT_REPO_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

SET(MAJOR_VERSION 1)
SET(MINOR_VERSION 0)
SET(PATCH_VERSION ${GIT_REPO_VERSION})

SET(CPACK_GENERATOR "DEB")

SET(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
set(CPACK_PACKAGE_NAME "libv4l2cpp-dev")
set(CPACK_DEBIAN_PACKAGE_NAME "libv4l2cpp-dev")

#设置架构
if (PLATFORM STREQUAL "ARM")
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "arm64")
# set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR}/aarch64-linux-gnu)
else ()
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
# set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR}/x86_64-linux-gnu)
endif ()

set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
SET(CPACK_PACKAGE_DESCRIPTION "libv4l2cpp-dev")
SET(CPACK_PACKAGE_CONTACT "wqhot@outlook.com")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "wq")

include(CPack)

SET(LIBS_DIR ${CMAKE_BINARY_DIR})
SET(INC_DIR ${CMAKE_SOURCE_DIR}/inc)

file(GLOB INC_FILES ${CMAKE_SOURCE_DIR}/inc/v4l2cpp/*)
INSTALL(FILES ${LIBS_DIR}/libv4l2cpp.a  DESTINATION lib)
INSTALL(FILES ${INC_FILES} DESTINATION include/v4l2cpp)
